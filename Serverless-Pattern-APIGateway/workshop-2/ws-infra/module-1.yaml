AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation template for Module 1 Setup'
Resources:

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "LambdaLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "arn:aws:logs:*:*:*"
  
  CalculateCostPerUnit:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          module.exports.CostCalculator = async (event) => {
            try {
              // Check if event is null or undefined and throw an error if it is
              if (!event) {
                throw new Error('Event object is undefined or empty');
              }

              // Use optional chaining to set default values for properties that may not exist
              const { price, size, unit, downPayment, downPaymentAmount } = event ?? {};
              
              // Convert size to square feet using a helper function
              const sizeInSqFt = Number(convertSizeToSqFt(size, unit));
              
              // Calculate the price per square foot to one decimal place
              const pricePerUnit = Number((price / sizeInSqFt).toFixed(1));

              // Calculate the median price based on whether downPayment or downPaymentAmount is present
              const medianPrice = downPayment
                ? (parseFloat(price) - (parseFloat(downPayment) / 100) * parseFloat(price)).toFixed(1)
                : downPaymentAmount
                  ? (parseFloat(price) - (parseFloat(downPaymentAmount) / 100) * parseFloat(price)).toFixed(1)
                  : (() => {
                    throw new Error('Missing downPayment or downPaymentAmount');
                  })();
              
              // Calculate the total cost by adding the price and the down payment (if it exists)
              const totalCost = (parseFloat(price) + Number(downPaymentAmount ?? 0)).toFixed(1);
              
              // Return a response object with a 200 status code and JSON body
              const response = {
                statusCode: 200,
                body: JSON.stringify({ pricePerUnit: pricePerUnit.toFixed(1).toString(), medianPrice: medianPrice.toString(), totalCost: totalCost.toString() }),
                headers: {
                  'X-Powered-By': 'AWS API Gateway & Lambda Serverless'
                },
                isBase64Encoded: false
              };

              return response;
            } catch (error) {
              // Log the error and return a response object with a 400 status code and an error message
              console.error('Error parsing request body:', error.message);
              return {
                statusCode: 400,
                body: 'Error parsing request body',
                headers: {
                  'X-Powered-By': 'AWS API Gateway & Lambda Serverless'
                },
                isBase64Encoded: false
              };
            }
          };

          // Define a helper function to convert size to square feet
          function convertSizeToSqFt(size, unit) {
              if (unit === 'sqFt') {
                  return parseFloat(size);
              } else if (unit === 'sqM') {
                  return parseFloat(size) * 10.7639;
              } else {
                  // Throw an error if the unit is not supported
                  throw new Error('Unsupported unit "' + unit + '"');
              }
          }
      Handler: index.CostCalculator
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 15
      MemorySize: 128

  MedianPriceCalculator:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          module.exports.MedianPriceCalculator = async (event) => {
              let region = event.region;
              let medianPrice;

              // Define median prices for US and CA
              const medianPrices = {
                  US: 320000.0,
                  CA: 240000.0,
              };

              // Check if the input region is valid and retrieve the corresponding median price
              if (region === 'US' || region === 'CA') {
                  medianPrice = medianPrices[region];
              } else {
                  medianPrice = medianPrices.US; // default to US median price if region is unknown
                  region = 'UNKNOWN REGION';
              }

              // Construct the response object
              const response = {
                  statusCode: 200,
                  body: JSON.stringify({region: region, medianPrice: medianPrice}),
                  headers: {
                      'X-Powered-By': 'AWS API Gateway & Lambda'
                  },
                  isBase64Encoded: false
              };

              return response;
          };
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.MedianPriceCalculator
      MemorySize: 128
      Runtime: nodejs18.x
      Timeout: 15
  
  RealState:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const realEstate = [
          {
            id: 1,
            name: 'Luxury Condo',
            description: 'A spacious and modern condo with beautiful views of the city skyline.',
            price: 500000,
            location: 'New York City',
          },
          {
            id: 2,
            name: 'Beach House',
            description: 'A charming beach house with private access to the beach and stunning ocean views.',
            price: 750000,
            location: 'Malibu, California',
          },
          {
            id: 3,
            name: 'Mountain Retreat',
            description: 'A cozy mountain retreat nestled in the heart of the Rockies, perfect for skiing and hiking.',
            price: 350000,
            location: 'Aspen, Colorado',
          },
          ];

          module.exports.RealState = async (event) => {
            const response = {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(realEstate),
            };

            return response;
          }
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.RealState
      MemorySize: 128
      Runtime: nodejs18.x
      Timeout: 15
