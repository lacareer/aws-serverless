AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Sample SAM Template for my first API with IaC

  '
Globals:
  Api:
    CacheClusterEnabled: true
    CacheClusterSize: '0.5'
    MethodSettings:
    - ResourcePath: /*
      HttpMethod: '*'
      DataTraceEnabled: true
      LoggingLevel: INFO
      MetricsEnabled: true
      CacheDataEncrypted: true
      CacheTtlInSeconds: 60
      CachingEnabled: true
  Function:
    Timeout: 3
    Runtime: nodejs18.x
Resources:
  FirstAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      OpenApiVersion: 3.0.3
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../../openapi.yaml
      EndpointConfiguration:
        Type: REGIONAL
      MethodSettings:
      - ResourcePath: /medianpricecalculator
        HttpMethod: POST
        CacheDataEncrypted: true
        CacheTtlInSeconds: 60
        CachingEnabled: true
  FirstAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
    - FirstAPIdevStage
    Properties:
      ApiStages:
      - ApiId:
          Ref: FirstAPI
        Stage: dev
        Throttle:
          /medianpricecalculator/POST:
            BurstLimit: 200
            RateLimit: 100
      Description: Exclusive plan for our best customers
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 200
      UsagePlanName: Platinum
  FirstAPIKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
    - FirstAPIUsagePlan
    Properties:
      Name: myFirstApiKey
      Description: Main key for module-2-my-first-api API
      Enabled: true
      StageKeys:
      - RestApiId:
          Ref: FirstAPI
        StageName: dev
  LinkUsagePlanApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId:
        Ref: FirstAPIKey
      KeyType: API_KEY
      UsagePlanId:
        Ref: FirstAPIUsagePlan
  CostCalculator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CostCalculator
      Handler: cost-calculator.CostCalculator
    Metadata:
      SamResourceId: CostCalculator
  MedianPriceCalculator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MedianPriceCalculator
      Handler: median-price-calculator.MedianPriceCalculator
    Metadata:
      SamResourceId: MedianPriceCalculator
  CostCalculatorUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CostCalculatorUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
  CostCalculatorUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CostCalculatorUserPool
      ClientName: Cost-Calculator-App-Client
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: AllowLambdaExec
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - CostCalculator
              - Arn
            - Fn::GetAtt:
              - MedianPriceCalculator
              - Arn
Outputs:
  FirstAPI:
    Description: API Gateway endpoint URL to call my first api
    Value:
      Fn::Sub: https://${FirstAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/
  CognitoUserPool:
    Description: Cognito User Pool Id
    Value:
      Ref: CostCalculatorUserPool
  CostCalculatorUserPoolClient:
    Description: App Client Id
    Value:
      Ref: CostCalculatorUserPoolClient
