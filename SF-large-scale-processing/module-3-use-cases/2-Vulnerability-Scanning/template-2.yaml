
AWSTemplateFormatVersion: 2010-09-09
Description: Security Vulnerability Scanning Module
Transform: 'AWS::Serverless-2016-10-31'

Resources:

  DataGeneratingBucket:
    Type: 'AWS::S3::Bucket'

  VulnerabilityDataBucket:
    Type: 'AWS::S3::Bucket'
    # Properties:
    #   NotificationConfiguration:
    #     EventBridgeConfiguration:
    #       EventBridgeEnabled: true

  VulnerabilitiesQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 30

  JobRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
      Policies:
        - PolicyName: WritePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:PutObject'
                Resource:
                  - !GetAtt 
                    - VulnerabilityDataBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - VulnerabilityDataBucket
                        - Arn
                      - '*'
        - PolicyName: PropertiesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:GetObject'
                  - 'S3:PutObject'
                Resource:
                  - !GetAtt 
                    - DataGeneratingBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - DataGeneratingBucket
                        - Arn
                      - '*'

  DataGeneratingJob:
    Type: 'AWS::Glue::Job'
    Properties:
      Command:
        Name: glueray
        PythonVersion: '3.9'
        Runtime: Ray2.4
        ScriptLocation: !Sub 's3://${DataGeneratingBucket}/datagenerating.py'
      DefaultArguments:
        '--pip-install': Faker
        '--NUMBER_OF_FILES_TO_GENERATE': 200000
        '--CLEAN_FILE_PROBABILITY': 0.98
        '--NUMBER_OF_WORDS_PER_FILE': 50000
        '--MAX_VULNERABILITIES': 8
        '--DATA_BUCKET_NAME': !Ref VulnerabilityDataBucket
      GlueVersion: '4.0'
      Role: !Ref JobRole
      WorkerType: Z.2X
      NumberOfWorkers: 100

  FunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AWSXrayFullAccess'
      Policies:
        - PolicyName: DeletePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:ListBucket'
                  - 'S3:DeleteObject'
                Resource:
                  - !GetAtt 
                    - VulnerabilityDataBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - VulnerabilityDataBucket
                        - Arn
                      - '*'
                  - !GetAtt 
                    - DataGeneratingBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - DataGeneratingBucket
                        - Arn
                      - '*'
        - PolicyName: WritePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:PutObject'
                Resource:
                  - !GetAtt 
                    - DataGeneratingBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - DataGeneratingBucket
                        - Arn
                      - '*'
        - PolicyName: JobPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'glue:StartJobRun'
                  - 'glue:GetJobRun'
                Resource:
                  - '*'

  DataGeneratingFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from time import sleep
          import cfnresponse

          def handler(event, context):

            request = event["RequestType"]

            if request == "Create":
              
              print("Creating")

              code = \
          """
          import ray
          from faker import Faker
          import os
          import random
          import uuid
          import boto3

          ray.init()
          fake = Faker()

          @ray.remote
          def upload(weight, words, max_vulnerabilities, bucket):
              
            choice = random.choices(
              population=["clean", "vulnerable"],
              weights=[weight, (1-weight)],
              k=1
            )[0]
              
            vulnerabilities = 0
            if choice == "vulnerable":
              vulnerabilities = random.randint(1, max_vulnerabilities)
              
            content = " ".join(random.sample(
              fake.words(nb=(words-vulnerabilities), unique=False) + [f'ssn={fake.ssn()}' for i in range(vulnerabilities)],
              words
            ))

            try:
              boto3.resource("s3").Object(
                bucket_name=bucket, 
                key=f'{str(uuid.uuid4())}.txt'
              ).put(Body=content)
            except: 
              pass
            
            return
              
          files = int(os.environ['NUMBER_OF_FILES_TO_GENERATE'])

          weight = ray.put(float(os.environ['CLEAN_FILE_PROBABILITY']))
          words = ray.put(int(os.environ['NUMBER_OF_WORDS_PER_FILE']))
          max_vulnerabilities = ray.put(int(os.environ['MAX_VULNERABILITIES']))
          bucket = ray.put(os.environ['DATA_BUCKET_NAME'])

          ray.get([upload.remote(weight, words, max_vulnerabilities, bucket) for i in range(files)])
          """

              boto3.resource("s3").Object(
                bucket_name=os.environ['GENERATING_BUCKET_NAME'], 
                key="datagenerating.py"
              ).put(Body=code)
              
              glue = boto3.client("glue")

              job_name = os.environ['JOB_NAME']
              
              job = glue.start_job_run(JobName=job_name)

              state = 'STARTING'
              while state not in ['SUCCEEDED', 'STOPPED', 'FAILED', 'TIMEOUT', 'ERROR']:
                sleep(10)
                state = glue.get_job_run(
                  JobName=job_name, 
                  RunId=job["JobRunId"]
                )["JobRun"]["JobRunState"]
                print(state)
            
            if request == "Delete":

              print("Deleting")

              s3 = boto3.resource("s3")

              data_bucket = s3.Bucket(os.environ['DATA_BUCKET_NAME'])
              data_bucket.objects.delete()

              generating_bucket = s3.Bucket(os.environ['GENERATING_BUCKET_NAME'])
              generating_bucket.objects.delete()
            
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
      Handler: index.handler
      MemorySize: 10240
      Timeout: 900
      Runtime: python3.10
      Environment:
        Variables:
          JOB_NAME: !Ref DataGeneratingJob
          GENERATING_BUCKET_NAME: !Ref DataGeneratingBucket
          DATA_BUCKET_NAME: !Ref VulnerabilityDataBucket
      Role: !GetAtt 
        - FunctionRole
        - Arn

  DataGeneratingCustomResource:
    Type: 'Custom::S3Create'
    Properties:
      ServiceToken: !GetAtt 
        - DataGeneratingFunction
        - Arn

  VulnerabilityScanningFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      InlineCode: |
        import json
        import boto3
        import re

        def handler(event, context): 
          
          key = event["detail"]["object"]["key"]

          obj = boto3.client('s3').get_object(
            Bucket=event["detail"]["bucket"]["name"], 
            Key=key
          )
          body = obj['Body'].read().decode()

          searches = re.findall("ssn=[^\s]+", body)
          if searches:
            return {"ssns": [{"key": key, "serial": number[-4:]} 
              for ssn, number in (search.split("=") for search in searches)
            ]}
          else:
            return {}
      Handler: index.handler
      MemorySize: 10240
      Timeout: 900
      Runtime: python3.10
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref VulnerabilityDataBucket

  StateMachineLogGroup:
    Type: 'AWS::Logs::LogGroup'

  StateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AWSXrayFullAccess'
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource:
                  - !Sub >-
                    arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:VulnerabilityScanningStateMachine*
        - PolicyName: ReadPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:GetObject'
                  - 'S3:ListBucket'
                Resource:
                  - !GetAtt 
                    - VulnerabilityDataBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - VulnerabilityDataBucket
                        - Arn
                      - '*'
        - PolicyName: InvokeFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Join 
                    - ':'
                    - - !GetAtt 
                        - VulnerabilityScanningFunction
                        - Arn
                      - '*'
                  - !GetAtt 
                    - VulnerabilityScanningFunction
                    - Arn
        - PolicyName: SendMessagePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:sendmessage'
                Resource:
                  - !GetAtt 
                    - VulnerabilitiesQueue
                    - Arn

  VulnerabilityScanningStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub 
        - |-
          {
            "StartAt": "Map",
            "States": {
              "Map": {
                "Type": "Map",
                "ItemProcessor": {
                  "ProcessorConfig": {
                    "Mode": "DISTRIBUTED",
                    "ExecutionType": "EXPRESS"
                  },
                  "StartAt": "Scan",
                  "States": {
                    "Scan": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${VulnerabilityScanningFunction}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Choice"
                    },
                    "Choice": {
                      "Type": "Choice",
                      "Choices": [
                        {
                          "Variable": "$.ssns",
                          "IsPresent": true,
                          "Next": "Queue"
                        }
                      ],
                      "Default": "Pass"
                    },
                    "Queue": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::sqs:sendMessage",
                      "Parameters": {
                        "MessageBody.$": "$",
                        "QueueUrl": "${VulnerabilitiesQueue}"
                      },
                      "End": true
                    },
                    "Pass": {
                      "Type": "Pass",
                      "End": true
                    }
                  }
                },
                "End": true,
                "Label": "Map",
                "MaxConcurrency": 1000,
                "ItemReader": {
                  "Resource": "arn:aws:states:::s3:listObjectsV2",
                  "Parameters": {
                    "Bucket.$": "$.bucket",
                    "Prefix.$": "$.prefix"
                  },
                  "ReaderConfig": {
                    "MaxItems": 1000
                  }
                },
                "ItemSelector": {
                  "detail": {
                    "bucket": {
                      "name.$": "$.bucket"
                    },
                    "object": {
                      "key.$": "$$.Map.Item.Value.Key"
                    }
                  }
                }
              }
            }
          }
        - VulnerabilitiesQueue: !Ref VulnerabilitiesQueue
          VulnerabilityScanningFunction: !GetAtt 
            - VulnerabilityScanningFunction
            - Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt 
                - StateMachineLogGroup
                - Arn
        IncludeExecutionData: true
        Level: ALL
      RoleArn: !GetAtt
        - StateMachineRole
        - Arn
      StateMachineType: STANDARD

  # RuleRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: events.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: StartExecutionPolicy
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - 'states:StartExecution'
  #               Resource:
  #                 - !GetAtt 
  #                   - VulnerabilityScanningStateMachine
  #                   - Arn

  # VulnerabilityScanningRule:
  #   Type: 'AWS::Events::Rule'
  #   Properties:
  #     EventPattern:
  #       source:
  #         - aws.s3
  #       detail-type:
  #         - Object Created
  #       detail:
  #         bucket:
  #           name:
  #             - !Ref VulnerabilityDataBucket
  #     State: DISABLED
  #     Targets:
  #       - Arn: !GetAtt 
  #           - VulnerabilityScanningStateMachine
  #           - Arn
  #         Id: VulnerabilityScanningRuleTarget
  #         RoleArn: !GetAtt 
  #           - RuleRole
  #           - Arn

Outputs:

  Bucket:
    Value: !Ref VulnerabilityDataBucket

  StateMachine:
    Value: !Ref VulnerabilityScanningStateMachine

  Function:
    Value: !Ref VulnerabilityScanningFunction

  Queue:
    Value: !Ref VulnerabilitiesQueue
