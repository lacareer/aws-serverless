AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM Template for orders

  '
Globals:
  Api:
    TracingEnabled: true
  Function:
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: orders
        POWERTOOLS_METRICS_NAMESPACE: ServerlessWorkshop
    Layers:
    - Fn::Sub: arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:26
Parameters:
  UserPool:
    Type: String
    Description: User Pool ID produced by the Users module
Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: orderId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: orderId
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  IdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
      BillingMode: PAY_PER_REQUEST
  WorkshopApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: Module3CognitoAuthorizer
        Authorizers:
          Module3CognitoAuthorizer:
            UserPoolArn:
              Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
  AddOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/create_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IdempotencyTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
          IDEMPOTENCY_TABLE_NAME:
            Ref: IdempotencyTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId:
              Ref: WorkshopApiGateway
      CodeUri: AddOrderFunction
    Metadata:
      SamResourceId: AddOrderFunction
  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/get_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: OrdersTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
      Layers:
      - Ref: PyUtils
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: get
            RestApiId:
              Ref: WorkshopApiGateway
      CodeUri: GetOrderFunction
    Metadata:
      SamResourceId: GetOrderFunction
  ListOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/list_orders.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: OrdersTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders
            Method: get
            RestApiId:
              Ref: WorkshopApiGateway
      CodeUri: ListOrdersFunction
    Metadata:
      SamResourceId: ListOrdersFunction
  EditOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/edit_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
      Layers:
      - Ref: PyUtils
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: put
            RestApiId:
              Ref: WorkshopApiGateway
      CodeUri: EditOrderFunction
    Metadata:
      SamResourceId: EditOrderFunction
  CancelOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/cancel_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: OrdersTable
      Layers:
      - Ref: PyUtils
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: delete
            RestApiId:
              Ref: WorkshopApiGateway
      CodeUri: CancelOrderFunction
    Metadata:
      SamResourceId: CancelOrderFunction
  PyUtils:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: pyutils
      Description: Shared utilities for Orders service
      ContentUri: PyUtils
      CompatibleRuntimes:
      - python3.10
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.10
      SamResourceId: PyUtils
Outputs:
  Module3ApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${WorkshopApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod
  OrdersTable:
    Description: DynamoDb Orders Table
    Value:
      Ref: OrdersTable
