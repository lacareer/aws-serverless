AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for orders

Globals:
  Api:
    TracingEnabled: true
  Function:
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: orders
        POWERTOOLS_METRICS_NAMESPACE: ServerlessWorkshop
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:26    
Parameters:
  UserPool:
    Type: String
    Description: User Pool ID produced by the Users module
   
Resources: 
  OrdersTable:  # Creates the DynamoDB table with userId and orderId as the keys
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "orderId"
          AttributeType: "S"
      KeySchema:  # Specifies the primary key. For Orders, the key is a composite of "userId" and "orderId".
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "orderId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST  # user pay-per-request billing

  IdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -   AttributeName: id
            AttributeType: S
      KeySchema:
        -   AttributeName: id
            KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
      BillingMode: PAY_PER_REQUEST

  WorkshopApiGateway:  # Defines the API Gateway
    Type: AWS::Serverless::Api 
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: Module3CognitoAuthorizer
        Authorizers:
          Module3CognitoAuthorizer:  # Sets Cognito user pool as default authorizer for API requests
            UserPoolArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
  AddOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/create_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref IdempotencyTable
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
          IDEMPOTENCY_TABLE_NAME: !Ref IdempotencyTable       
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId: !Ref WorkshopApiGateway

  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/get_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBReadPolicy:
          TableName: !Ref OrdersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
      Layers:
        - !Ref PyUtils
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: get
            RestApiId: !Ref WorkshopApiGateway
  
  ListOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/list_orders.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBReadPolicy:
          TableName: !Ref OrdersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders
            Method: get
            RestApiId: !Ref WorkshopApiGateway
  EditOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/edit_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref OrdersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
      Layers:
        - !Ref PyUtils
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: put
            RestApiId: !Ref WorkshopApiGateway
  CancelOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/api/cancel_order.lambda_handler
      Runtime: python3.10
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref OrdersTable
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
      Layers:
        - !Ref PyUtils
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders/{orderId}
            Method: delete
            RestApiId: !Ref WorkshopApiGateway
  PyUtils:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: pyutils
        Description: Shared utilities for Orders service 
        ContentUri: src/layers/
        CompatibleRuntimes:
          - python3.10
        RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.10

Outputs:
  Module3ApiEndpoint:  # Returns the API URL
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${WorkshopApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  OrdersTable:
    Description: "DynamoDb Orders Table"
    Value: !Ref OrdersTable

