Resources:
  employees:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  importBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-importbuc-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  importBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref importBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt importBucket.Arn
              - !Sub ${importBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  dataLoader:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: dataLoader
      CodeUri: /src/dataLoader
      Handler: handler.handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          EMPLOYEES_TABLE_NAME: !Ref employees
          EMPLOYEES_TABLE_ARN: !GetAtt employees.Arn
          IMPORTBUCKET_BUCKET_NAME: !Ref importBucket
          IMPORTBUCKET_BUCKET_ARN: !GetAtt importBucket.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref employees
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${importBucket}
                - !Sub arn:${AWS::Partition}:s3:::${importBucket}/*
  dataLoaderLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${dataLoader}
  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: API
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /employees:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listTable.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  listTable:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: listTable
      CodeUri: src/listTable
      Handler: listable.handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        APIGETemployees:
          Type: Api
          Properties:
            Path: /employees
            Method: GET
            RestApiId: !Ref API
      Environment:
        Variables:
          EMPLOYEES_TABLE_NAME: !Ref employees
          EMPLOYEES_TABLE_ARN: !GetAtt employees.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref employees
  listTableLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${listTable}
Transform: AWS::Serverless-2016-10-31